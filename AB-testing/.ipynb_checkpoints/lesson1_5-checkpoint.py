{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3cc0ec7c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "from datetime import datetime\n",
    "\n",
    "\n",
    "class DataService:\n",
    "\n",
    "    def __init__(self, table_name_2_table):\n",
    "        self.table_name_2_table = table_name_2_table\n",
    "\n",
    "    def get_data_subset(self, table_name, begin_date, end_date, user_ids=None, columns=None):\n",
    "        df = self.table_name_2_table[table_name]\n",
    "        if begin_date:\n",
    "            df = df[df['date'] >= begin_date]\n",
    "        if end_date:\n",
    "            df = df[df['date'] < end_date]\n",
    "        if user_ids:\n",
    "            df = df[df['user_id'].isin(user_ids)]\n",
    "        if columns:\n",
    "            df = df[columns]\n",
    "        return df.copy()\n",
    "\n",
    "\n",
    "class MetricsService:\n",
    "\n",
    "    def __init__(self, data_service):\n",
    "        \"\"\"Класс для вычисления метрик.\n",
    "\n",
    "        :param data_service (DataService): объект класса, предоставляющий доступ к данным.\n",
    "        \"\"\"\n",
    "        self.data_service = data_service\n",
    "\n",
    "    def _get_data_subset(self, table_name, begin_date, end_date, user_ids=None, columns=None):\n",
    "        \"\"\"Возвращает часть таблицы с данными.\"\"\"\n",
    "        return self.data_service._get_data_subset(table_name, begin_date, end_date, user_ids, columns)\n",
    "\n",
    "    def _calculate_response_time(self, begin_date, end_date, user_ids):\n",
    "        \"\"\"Вычисляет значения времени обработки запроса сервером.\n",
    "        \n",
    "        Нужно вернуть значения user_id и load_time из таблицы 'web-logs', отфильтрованные по date и user_id.\n",
    "        Считаем, что каждый запрос независим, поэтому группировать по user_id не нужно.\n",
    "\n",
    "        :param begin_date, end_date (datetime): период времени, за который нужно считать значения.\n",
    "        :param user_id (None, list[str]): id пользователей, по которым нужно отфильтровать полученные значения.\n",
    "        \n",
    "        :return (pd.DataFrame): датафрейм с двумя столбцами ['user_id', 'metric']\n",
    "        \"\"\"\n",
    "        # YOUR_CODE_HERE\n",
    "        df_response_time = self.data_service.table_name_2_table['web-logs']\n",
    "        if begin_date:\n",
    "            df_response_time = df_response_time[df_response_time['date'] >= begin_date]\n",
    "        if end_date:\n",
    "            df_response_time = df_response_time[df_response_time['date'] < end_date]\n",
    "        if user_ids:\n",
    "            df_response_time = df_response_time[df_response_time['user_id'].isin(user_ids)]\n",
    "        df_response_time = df_response_time.rename(columns={'load_time':'metric'})\n",
    "        return df_response_time[['user_id', 'metric']].copy()\n",
    "        \n",
    "\n",
    "    def _calculate_revenue_web(self, begin_date, end_date, user_ids):\n",
    "        \"\"\"Вычисляет значения выручки с пользователя за указанный период\n",
    "        для заходивших на сайт в указанный период.\n",
    "\n",
    "        Эти данные нужны для экспериментов на сайте, когда в эксперимент попадают только те, кто заходил на сайт.\n",
    "        \n",
    "        Нужно вернуть значения user_id и выручки (sum(price)).\n",
    "        Данные о ценах в таблице 'sales'. Данные о заходивших на сайт в таблице 'web-logs'.\n",
    "        Если пользователь зашёл на сайт и ничего не купил, его суммарная стоимость покупок равна нулю.\n",
    "        Для каждого user_id должно быть ровно одно значение.\n",
    "\n",
    "        :param begin_date, end_date (datetime): период времени, за который нужно считать значения.\n",
    "            Также за этот период времени нужно выбирать пользователей, которые заходили на сайт.\n",
    "        :param user_id (None, list[str]): id пользователей, по которым нужно отфильтровать полученные значения.\n",
    "        \n",
    "        :return (pd.DataFrame): датафрейм с двумя столбцами ['user_id', 'metric']\n",
    "        \"\"\"\n",
    "        # YOUR_CODE_HERE\n",
    "        df_web_1 = metrics_service.data_service.table_name_2_table['web-logs']\n",
    "        df_sales_1 = metrics_service.data_service.table_name_2_table['sales']\n",
    "        df_full = df_sales_1.merge(df_web_1, how = 'outer', on = ['user_id', 'date']).fillna({'price':0})\n",
    "        user_id = df_web_1[(df_web_1['date'] >= begin_date) & (df_web_1['date'] < end_date)].user_id.unique().tolist()\n",
    "        df_revenue_web = (df_full[df_full['user_id'].isin(user_id)]\n",
    "         .groupby('user_id', as_index=False)\n",
    "         .agg({'price':'sum'})\n",
    "         .rename(columns={'price': 'metric'}))\n",
    "        return df_revenue_web[['user_id', 'metric']].copy()\n",
    "\n",
    "    def _calculate_revenue_all(self, begin_date, end_date, user_ids):\n",
    "        \"\"\"Вычисляет значения выручки с пользователя за указанный период\n",
    "        для заходивших на сайт до end_date.\n",
    "\n",
    "        Эти данные нужны, например, для экспериментов с рассылкой по email,\n",
    "        когда в эксперимент попадают те, кто когда-либо оставил нам свои данные.\n",
    "        \n",
    "        Нужно вернуть значения user_id и выручки (sum(price)).\n",
    "        Данные о ценах в таблице 'sales'. Данные о заходивших на сайт в таблице 'web-logs'.\n",
    "        Если пользователь ничего не купил за указанный период, его суммарная стоимость покупок равна нулю.\n",
    "        Для каждого user_id должно быть ровно одно значение.\n",
    "\n",
    "        :param begin_date, end_date (datetime): период времени, за который нужно считать значения.\n",
    "            Нужно выбирать пользователей, которые хотя бы раз заходили на сайт до end_date.\n",
    "        :param user_id (None, list[str]): id пользователей, по которым нужно отфильтровать полученные значения.\n",
    "        \n",
    "        :return (pd.DataFrame): датафрейм с двумя столбцами ['user_id', 'metric']\n",
    "        \"\"\"\n",
    "        # YOUR_CODE_HERE\n",
    "        df_web_1 = metrics_service.data_service.table_name_2_table['web-logs']\n",
    "        df_sales_1 = metrics_service.data_service.table_name_2_table['sales']\n",
    "        df_full = df_sales_1.merge(df_web_1, how = 'outer', on = ['user_id', 'date']).fillna({'price':0})\n",
    "        user_id = df_web_1[df_web_1['date'] < end_date].user_id.unique().tolist()\n",
    "        df_revenue_all = (df_full[df_full['user_id'].isin(user_id)]\n",
    "         .groupby('user_id', as_index=False)\n",
    "         .agg({'price':'sum'})\n",
    "         .rename(columns={'price': 'metric'}))\n",
    "        return df_revenue_all[['user_id', 'metric']].copy()\n",
    "\n",
    "    def calculate_metric(self, metric_name, begin_date, end_date, user_ids=None):\n",
    "        \"\"\"Считает значения для вычисления метрик.\n",
    "\n",
    "        :param metric_name (str): название метрики\n",
    "        :param begin_date (datetime): дата начала периода (включая границу)\n",
    "        :param end_date (datetime): дата окончания периода (не включая границу)\n",
    "        :param user_ids (list[str], None): список пользователей.\n",
    "            Если None, то вычисляет значения для всех пользователей.\n",
    "        :return df: columns=['user_id', 'metric']\n",
    "        \"\"\"\n",
    "        if metric_name == 'response time':\n",
    "            return self._calculate_response_time(begin_date, end_date, user_ids)\n",
    "        elif metric_name == 'revenue (web)':\n",
    "            return self._calculate_revenue_web(begin_date, end_date, user_ids)\n",
    "        elif metric_name == 'revenue (all)':\n",
    "            return self._calculate_revenue_all(begin_date, end_date, user_ids)\n",
    "        else:\n",
    "            raise ValueError('Wrong metric name')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e4770ad8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9ff877d9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "46986be9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6b4acf9f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
